-- Get the player's character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Define the RE function
local function RE(RemoteName)
    return require(game:GetService("ReplicatedStorage").ClientModules.Core.RouterClient.RouterClient).get(RemoteName)
end

-- Function to teleport to a position
local function teleportTo(position)
    local targetCFrame = CFrame.new(position)
    humanoidRootPart.CFrame = targetCFrame
    humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
    wait(0.1)
    print("Actual position after teleport: " .. tostring(humanoidRootPart.Position))
end

-- Function to lock character movement completely
local function lockMovement()
    humanoid.WalkSpeed = 0
    humanoid.JumpPower = 0
    humanoidRootPart.Anchored = true
    humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
    humanoid:ChangeState(Enum.HumanoidStateType.Seated) -- Chuyển sang trạng thái ngồi để khóa di chuyển
    print("Locked movement - Anchored: " .. tostring(humanoidRootPart.Anchored) .. ", WalkSpeed: " .. humanoid.WalkSpeed)
end

-- Function to enforce lock over multiple frames
local function enforceLock()
    for i = 1, 10 do
        lockMovement()
        wait(0.05) -- Áp dụng liên tục trong 0.5 giây để đảm bảo
    end
end

-- Function to move naturally to a target position
local function moveNaturally(startPos, endPos)
    local distance = (endPos - startPos).Magnitude
    local steps = math.floor(distance / 2)
    local direction = (endPos - startPos).Unit
    
    for i = 1, steps do
        local newPosition = startPos + (direction * (i * 2))
        teleportTo(newPosition)
        humanoid:MoveTo(newPosition)
        wait(0.2)
    end
    teleportTo(endPos)
    humanoid:MoveTo(endPos)
end

-- Function to check if teleport was successful
local function checkTeleportSuccess(targetPosition)
    local maxAttempts = 5
    local attempt = 1
    local tolerance = 1
    
    while attempt <= maxAttempts do
        local currentPosition = humanoidRootPart.Position
        local distance = (currentPosition - targetPosition).Magnitude
        
        if distance <= tolerance then
            return true
        end
        
        print("Teleport check attempt " .. attempt .. " failed. Distance: " .. distance .. " Current: " .. tostring(currentPosition))
        teleportTo(targetPosition)
        wait(0.5)
        attempt = attempt + 1
    end
    return false
end

-- Step 1: Fire the UnsubscribeFromHouse remote
local args = {
    [1] = game:GetService("Players").LocalPlayer,
    [2] = true
}
RE("HousingAPI/UnsubscribeFromHouse"):InvokeServer(unpack(args))
print("Unsubscribed from house")
wait(10)

-- Step 2: Teleport to first position and move naturally to second position
local firstPosition = Vector3.new(5991, 6530, 12070)
local secondPosition = Vector3.new(5984.46875, 6526.1015625, 12083.5029296875)

teleportTo(firstPosition)
print("Teleported to first position: " .. tostring(firstPosition))

print("Moving naturally to: " .. tostring(secondPosition))
moveNaturally(firstPosition, secondPosition)
print("Reached second position: " .. tostring(secondPosition))

wait(10)

-- Step 3: Teleport to final position with check and lock movement immediately
local finalPosition = Vector3.new(74.45714569091797, 39.694610595703125, -1571.4041748046875)
teleportTo(finalPosition)

if checkTeleportSuccess(finalPosition) then
    print("Successfully teleported to final position: " .. tostring(finalPosition))
    enforceLock() -- Khóa di chuyển và áp dụng liên tục
else
    print("Failed to teleport to final position after multiple attempts")
end
